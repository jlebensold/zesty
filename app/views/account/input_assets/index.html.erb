<%= breadcrumb [
  { el: link_to("Dashboard", account_dashboard_path) },
  { el: "Classifiers" },
  { el: link_to(@classifier.name, account_classifier_path(@classifier)) },
  { el: "Training Images", active: true }
] %>
<div class="row main-row bd-content-row">
  <div class="col-md-12">
    <%= render partial: "shared/classifier_header", locals: { classifier: @classifier, active: :images }  %>
		<div class="row justify-content-between">
			<div class="col-7">
				<p style="padding-top: 1rem">
				<strong>Manage Training Set</strong>
				<br>
				 Upload images (.jpg) or video files (.m4v format) for each label.</p>
			</div>
			<div class="align-end" style="padding: 1rem">
				<a href="#" class="btn btn-sm btn-primary" id="upload-dropzones"><i class="fa fa-upload"></i> Begin Upload</a>
			</div>
		</div>
    <div class="row bd-content-wrap">
      <div class="col-md-12 bd-content-scroll">
        <div id="accordion">
          <% @classifier.asset_labels.each_with_index do |label, index| %>
            <div class="card">
              <div class="x-card-header" id="h-<%= index %>">
								<button class="btn-sm label-accordion-header" data-toggle="collapse" data-target="#collapse-<%= index %>" aria-expanded="true" aria-controls="collapse-<%= index %>" type="button" aria-expanded="false" >
									<%= label %>
								</button>
              </div>
              <div id="collapse-<%= index %>" class="collapse multi-collapse" aria-labelledby="h-<%= index %>">
                <div class="card-body">
                  <div class="controls">
                    <%= form_for @classifier,
                      url: account_classifier_input_assets_path(@classifier, label: label ),
                      as: :input_assets,
                      method: :post,
                      html: { label: label, class: "form-horizontal dropzone attachment-file-#{index}", multipart: true } do |f| %>
                    <% end %>
                  </div>
                  <div>Existing assets:</div>
                  <ul class="list-group">
                    <% @classifier.input_assets.where(label: label).each do |input_asset| %>
                      <li class="list-group-item d-flex justify-content-between align-items-center">
                        <%= input_asset.attachment.original_filename %>
                        <%= link_to "<i class='fa fa-trash'></i>".html_safe,
                          account_classifier_input_asset_path(@classifier, input_asset),
                          filename: input_asset.attachment.original_filename,
                          class: "btn btn-sm btn-danger btn-destroy-image" %>
                      </li>
                    <% end %>
                  </ul>

                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  window.dropzones = [];
  window.uploadInProgress = false;
  var processUpload = function() {
    for(var i=0; i < dropzones.length; i++) {
      if (!filesCompleted(dropzones[i]) && !uploadInProgress) {
        uploadInProgress = true;
        dropzones[i].processQueue();
      }
    }
  }
  var filesCompleted = function(dropzone) {
    return dropzone.files.filter(function(r) { return r.status !== Dropzone.SUCCESS }).length === 0;
  }
  $(function() {
    $("#upload-dropzones").click(function(evt) {
      evt.preventDefault();
      processUpload();
    });
    $(".list-group").on("click", ".btn-destroy-image", function(evt) {
      evt.preventDefault();
      var emt = $(this);
      if(confirm("Remove " + $(this).attr('filename') + "?")) {
        $.ajax({
          url: emt.attr('href'),
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector("meta[name=csrf-token]").content
          },
          success: function() {
            emt.parent().remove();
          }
        });
      };
    });
    $(".dropzone").each( function(a, emt, index) {
      var dz = new Dropzone(emt, {
        autoProcessQueue: false,
        maxFiles: 1000,
        uploadMultiple: true,
        parallelUploads: 10,
        timeout: 300000,
        dictDefaultMessage: 'Add files (e.g. jpg or m4v) for "' + emt.getAttribute('label') + '"',
      });
      dz.on("queuecomplete", function() {
        window.uploadInProgress = false;
        processUpload();
      });
      dropzones.push(dz);
    });
  });
</script>
